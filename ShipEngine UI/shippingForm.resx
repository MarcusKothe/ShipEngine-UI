<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATzEfAFAyIAhOMB4lTS4cEVY5Jw1aPSwGWDwqD1U4
        JgtaPi0LUjUiD0EhDQBTNiQGTC0bMUssGSlPMR4RTS4bF1EzIR5RMyEKTS8cGEwuGzNOLx0MSywZGkwt
        Gg9LLBkcUDIgGFEzIRZLLBkfSywZNk0vHA9MLhsAAAAAAAAAAABQMiAAUTMhEU4wHkxNLxxJTzAePlQ3
        JTVRNCJLTjAdLVU4JjBPMR5QSy0aI1AzICFKKxizSisYcU0vHUVKKxmLSSsYtEorGDxLLRqFSy0aqUor
        GV1IKRZxSCoXP0kqF4lKKxioSSoXYEgqF39JKheiSisZJkorGAAAAAAAAAAAAE4wHQBPMR8kTS8dYk8x
        HyNNLxxDUDMgSE8xH1VNLx0vVDclMlAyIFtOMB5cTzEfO0wuG7xRMyF6TjAeSkorGMVJKhelSSoXQ0ss
        GpBPMR6QTzIfRUgpFnhIKhdASSoXu0krGKlIKRZdSSoYhk4wHq1RNCIoUTMhAAAAAAAAAAAATjAeAE8x
        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
        P8fgf/4H8H/+D/h//h////////////////8=
</value>
  </data>
</root>